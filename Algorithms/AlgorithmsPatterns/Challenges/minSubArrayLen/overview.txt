Understand the problem:
	Restate the problem in my own words:
	Given an array of positive integers and an integer, return the smallest contiguous subarray whose values can be used to represent a value which is greater or equal to the passed integer.

	What are the inputs that go into my function?
	An array of integers
	An integer representing the valued which should be equalized or surpassed.

	What are the outputs that should come from my solution?
	An integer representing how many numbers is required to outpass or equalize (which comes first) the passed integer. If there's no way of doing one of the both mentioned earlier, return 0.

	Do I have enough information?
	Yes.

	How should I label important pieces of my code?
	maxSum to store the max value generated by the array of integers.
	counter to store how many values I've used to equalize or surpass the passed integer
	tempSum to add up all the values needed to equal desired integer.

Concrete examples:
	minSubArrayLen([2, 3, 1, 2, 4, 3], 7) // 2 -> because [4, 3] is the smallest subarray
	minSubArrayLen([2, 1, 6, 5, 4], 9) // 2 -> because [5, 4] is the smallest subarray
	minSubArrayLen([3, 1, 7, 11, 2, 9, 7, 21, 62, 33, 19], 52) // 1 -> because [62] is greater than 52

	minSubArrayLen([1, 4, 16, 22, 5, 7, 8, 9, 10], 39) // 3
	minSubArrayLen([1, 4, 16, 22, 5, 7, 8, 9, 10], 55) // 5
	minSubArrayLen([4, 3, 3, 8, 1, 2, 3], 11) // 2
	minSubArrayLen([1, 4, 16, 22, 5, 7, 8, 9, 10], 95) // 0
	